#!/bin/bash

# This script will let you connect to existing APs by simple terminal-commands

#todo: --known to list known networks
# --reconnect: stop when a interface was able to reconnect
# substract the AP-interface to prevent interruption through reconnect

free_if=''					#stores the first found free interface


#store all available wifi-interfaces in an array
n=0
for j in $(iw dev | grep -o 'wlan[0-99]') ; do
	wifi_interfaces[$n]=$j
	let "n= $n + 1"
	if [ ! -f /etc/wpa_supplicant/wpa_supplicant-$j.conf ]; then
		cp /etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant-$j.conf
	fi
done


#function for handling connection
connector() {
	#$1 = network
	#$2 = passphrase
	#$3 = device
	ip link set $1 up
	systemctl stop wpa_supplicant@$1.service
	systemctl start wpa_supplicant@$1.service
	#ip r del default
	if ! [[ $(systemctl status dhcpcd@$1 | grep -o "active (running)") ]]; then
		systemctl start dhcpcd@$1
	else
		systemctl restart dhcpcd@$1
	fi
}


disconnector() {
	#$1 = device
	systemctl stop wpa_supplicant@$1.service
	rm /etc/wpa_supplicant/wpa_supplicant-$1.conf
	sleep 2
	ip a flush $1
	ip r del default
	if [[ $(systemctl status dhcpcd@$1 | grep -o "active (running)") ]]; then
		systemctl stop dhcpcd@$1 
	fi
	echo ''
	echo 'Network on device '$1 'successfully disconnected and dhcpcd-daemon stopped.'
	echo ''
	ip link set $1 down
}


#$1 = device to check if its usable (type: managed AND without SSID)
interface_checker() {
	if [ -z "$1" ]; then
		for i in ${wifi_interfaces[@]}
		do
			if [[ -z $(iw $i info | grep -o 'ssid') && $(iw $i info | grep -o 'managed') ]]; then
				free_if=$i
			else
				free_if=''
			fi
		done
	else
		if [[ -z $(iw $1 info | grep -o 'ssid') && $(iw $1 info | grep -o 'managed') ]]; then
			free_if=$1
		else
			free_if=''
		fi
	fi
}


store_credentials() {
	#$1 = network
	#$2 = passphrase
	#$3 = device
	#stores the credentials in conf for every interface
	for i in ${wifi_interfaces[@]}
	do
	if [ ! -f /etc/wpa_supplicant/wpa_supplicant-$i.conf ]; then
		cp /etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant-$i.conf
	fi	
	( echo "" ; wpa_passphrase "$1" "$2" ) >> /etc/wpa_supplicant/wpa_supplicant-$i.conf
	done
	echo 'Network and credentials stored.'
}


###						###
### Settings start here ###
###						###


if [[ $1 == '-i' || $1 == '--interface' ]]; then
	echo ''
	echo 'Available devices and state:'
	for i in ${wifi_interfaces[@]}
	do
		#check connected devices and their network
		if [[ $(iw $i info | grep -o 'ssid') ]]; then
		echo $i '- not available' $(iw $i info | grep 'ssid')
		#check if devices any AP-state
		elif [[ $(iw $i info | grep -o 'AP') ]]; then
		echo $i '- AP active'
		else echo $i '- Available for connections'
		fi
	done
	echo ''

#$2 specified interface or use any available (doesn't have to be free)
elif [[ $1 == '-s' || $1 == '--scan' ]]; then
	if  [[ -n $2 ]]; then
		echo 'Using' $2 'for scan...'
		ip link set $2 up
		iw dev $2 scan | grep 'SSID:'
		echo ''
	else
		if [ "${#wifi_interfaces[@]}" == 0 ]; then
			echo ''
			echo 'There is no interface available.'
			echo 'Scan not possible.'
			echo ''
		else
			echo ''
			echo 'Found available interface:' ${wifi_interfaces[0]}			
			echo 'Networks in range:'
			ip link set ${wifi_interfaces[0]} up 
			iw dev ${wifi_interfaces[0]} scan | grep 'SSID:'
			echo ''
		fi
	fi
elif [[ $1 == '-r' || $1 == '--reconnect' ]]; then
		echo ''
		echo 'Trying to reconnect existing network...'
		echo ''
	if [ -z $2 ]; then
		for i in ${wifi_interfaces[@]} 
		do
			interface_checker $i
			if ! [ "$free_if" == '' ]; then
				echo ''
				echo 'Using' $free_if 'for reconnection...'
				echo 'Waiting for network...'
				echo ''
				connector $free_if
				break
			fi
		done
		
	else
		interface_checker $2
		if [ "$free_if" == "$2" ]; then				
			echo ''
			echo 'Using' $2 'for reconnection...'
			echo 'Waiting for network...'
			echo ''
			connector $2
		fi
	fi
	if [ "$free_if" == '' ]; then
		echo ''
		echo 'There is no free interface available.'
		echo 'Connection not possible.'
		echo ''			
	elif ! [ "$free_if" == '' ]; then
		for i in {1..10} 
			do
			if [[ $(iw $free_if dev | grep -o 'ssid') ]]; then
				echo ''
				echo 'Connection established.'
				echo ''
				break
			elif [ i == '10' ]; then
				echo ''
				echo 'Reconnection not possible.'
				echo 'Unknown problem. New passphrase?'
				echo ''
			fi
			sleep 1s
		done
	fi

elif [[ $1 == '-c' || $1 == '--connect' ]]; then
# $2 = network to connect
# $3 = passphrase
# $4 = device
	#check if all parameter are given
	if [[ -z $2 || -z $3 ]]; then
		echo ''
		echo 'No ESSID or PASSPHRASE given. Aborting.'
		echo ''
	else
		echo ''
		echo 'Trying to connect...'
		echo ''
		#did user specify an interface?
		if  [[ -z $4 ]]; then
			interface_checker
			if [ "$free_if" == '' ]; then
				echo ''
				echo 'There is no free interface available.'
				echo 'Connection not possible.'
				echo ''			
			else
				echo ''
				echo 'Found available interface:' $free_if
				store_credentials "$2" "$3" "$free_if"
				connector "$free_if"
				echo ''
				echo 'Connection established.'
				echo ''
			fi
		else
			#check if specified interface is in the free-array
			interface_checker $4
			if [ "$free_if" == '' ]; then
				echo ''
				echo 'Interface' $4 'not available. Aborting...'
				echo 'Check free interfaces and try again.'
				echo ''
			else
				store_credentials "$2" "$3" "$4"
				connector "$4"
				echo ''
				echo 'Using' $2 'for connection...'
				echo 'Connection established.'
				echo ''
			fi	
		fi
	fi
elif [[ $1 == '-d' || $1 == '--disconnect' ]]; then
#2 = device to disconnect
	if [[ -z $2 ]]; then
		echo 'Please specifiy interface to be disconnected! Aborting...'
	else 
		disconnector $2
	fi
elif [[ $1 == '-k' || $1 == '--known' ]]; then
        if [[ $2 == '-r' || $2 == '--remove' ]]; then
                if [[ $3 == '-a' || $3 == '--all' ]]; then
                        echo ''
                        echo 'Removing all known networks from /etc/wpa_supplicant/ ...'
						echo ''
                        sed -zi 's/network.*$//' /etc/wpa_supplicant/wpa_supplicant-*.conf
                elif [[ -z $3 ]]; then
                        echo ''
                        echo 'Please give the SSID to remove or [-all] for full cleaning.'
                        echo ''
                else
                        echo 'Removing ' $3 ' from known networks.'
                fi
        elif [[ -z $2 ]]; then
                echo ''
                echo 'List of known wifi-networks:'
        fi
elif [[ $1 == '-h' || $1 == '--help' ]]; then
	echo ''
	echo '----- simple wifi scan & connect script v1.6 -----'
	echo ''
	echo 'Usage:'
	echo '[wifi] [parameter] [opt1]'
	echo ''
	echo '[parameter]:'
	echo '[-i] [--interface]	  List all devices and state (free or AP).'
	echo ''
	echo '[-s] [--scan]           Scans for networks with first free interface'
	echo '                        [opt1]: optional specify used interface'
	echo ''
	echo '[-c] [--connect]        Connect to network with param [network] [passphrase] [device]'
	echo ''
	echo '[-r] [--reconnect]      Automatically try a reconnect to any known network in range.'
	echo ''
	echo '[-d] [--disconnect]     Disconnect a device from network'
	echo ''
	echo '[-k] [--known]          List known wifi-networks and remove specified or all'
	echo '                        [-r][--remove] [ssid] or [-a][--all]'
	echo ''
	echo 'ATTENTION: If any whitespaces in network or passphrase use " "!'
	echo ''
	echo 'If no device is given the first available will be used.'
	echo ''
else
	echo ''
	echo 'Type -h --help for help'
	echo ''
fi
